Chapter III - MAndatory Part
1. Overview

Thanks to your website, users will play Pong with others. You have to provide a nice
user interface and real-time multiplayer online games!
• Your project needs to adhere to the following guidelines as a minimum requirement,
contributing only a small portion to the final grade.
• The second part of this subject will offer additional modules that can replace or
complete the following rules.
In this Subject, certain words are highlighted in green. These represent technology
choices that will evolve over time. Pay close attention to the version of the subject.


2. Minimal technical requirement

Your project has to comply with the following rules:

INFORMATION : 
Again, some of these contraints could be overriden by the choice of
specific modules.

• You are free to develop the site, with or without a backend.
◦ If you choose to include a backend, it must be written in pure Ruby . However,
this requirement can be overridden by the Framework module.
◦ If your backend or framework uses a database, you must follow the constraints
of the Database module.
• The frontend should be developed using pure vanilla Javascript . However, this
requirement can be altered through the FrontEnd module.
• Your website must be a single-page application. The user should be able to use the
Back and Forward buttons of the browser.
• Your website must be compatible with the latest stable up-to-date version of
Google Chrome .
• The user should encounter no unhandled errors and no warnings when browsing the
website.
• Everything must be launched with a single command line to run an autonomous
container provided by Docker . Example : docker-compose up --build

WARNING : If your container solution is Docker:
When your computers in clusters run under Linux, you will use Docker
in rootless mode for security reasons. This comes with 2 sideways:
• Your Docker runtime files must be located in /goinfre or
/sgoinfre.
• You can’t use so called “bind-mount volumes” between the host
and the container if non-root UIDs are used in the container.
Depending on the project, your situation and the context, several
fallbacks exist: Docker in a VM, rebuild you container after your
changes, craft your own docker image with root as unique UID.


3. Game

The main purpose of this website is to play Pong versus other players.
• Therefore, users must have the ability to participate in a live Pong game against
another player directly on the website. Both players will use the same keyboard.
The Remote players module can enhance this functionality with remote players.
• A player must be able to play against another player, but it should also be possible
to propose a tournament. This tournament will consist of multiple players who
can take turns playing against each other. You have flexibility in how you implement
the tournament, but it must clearly display who is playing against whom and the
order of the players.
• A registration system is required: at the start of a tournament, each player
must input their alias name. The aliases will be reset when a new tournament
begins. However, this requirement can be modified using the Standard User
Management module.
• There must be a matchmaking system: the tournament system organize the
matchmaking of the participants, and announce the next fight.
• All players must adhere to the same rules, which includes having identical paddle
speed. This requirement also applies when using AI; the AI must exhibit the same
speed as a regular player.
• The game itself must be developed in accordance with the default frontend constraints
(as outlined above), or you may choose to utilize the FrontEnd module,
or you have the option to override it with the Graphics module. While the visual
aesthetics can vary, it must still capture the essence of the original Pong (1972).

WARNING :
• The use of libraries or tools that provide an immediate
and complete solution for a global feature or a module is prohibited.
• Any direct instruction about the usage (can, must, can’t) of a
third-party library or tool must be followed.
• The use of a small library or tool that solves a simple and
unique task, representing a subcomponent of a global feature or
module, is allowed.
• During the evaluation, the team will justify any usage of
library or tool that is not explicitly approved by the subject,
and that is not in contradiction with the constraints of the
subject.
• During the evaluation, the evaluator will take her/his
responsibility and define if the usage of a specific library
or tool is legitimate (and allowed) or almost solving an entire
feature or module (and prohibited).


4. Security concerns

In order to create a basic functional website, here are a few security concerns that you
have to tackle:
• Any password stored in your database, if applicable, must be hashed.
• Your website must be protected against SQL injections/XSS.
• If you have a backend or any other features, it is mandatory to enable an HTTPS
connection for all aspects (Utilize wss instead of ws...).
• You must implement some form of validation for forms and any user input, either
within the base page if no backend is used or on the server side if a backend is
employed.
• Regardless of whether you choose to implement the JWT Security module with
2FA, it’s crucial to prioritize the security of your website. For instance, if you opt
to create an API, ensure your routes are protected. Remember, even if you decide
not to use JWT tokens, securing the site remains essential.

WARNING : 
Please make sure you use a strong password hashing algorithm

WARNING : 
For obvious security reasons, any credentials, API keys, env
variables etc... must be saved locally in a .env file and ignored by
git. Publicly stored credentials will lead you directly to a failure
of the project.


Chapter IV -  Modules

Now that you’ve accomplished 25% of the project, congratulations!
With a functional basic website in place, the next step is to choose modules for further improvement.
To attain 100% project completion, a minimum of 7 major modules is required.
It’s crucial to carefully review each module as it may necessitate modifications to your
baseline website. Therefore, we strongly recommend reading this entire subject thoroughly

WARNING : 
• The use of libraries or tools that provide an immediate
and complete solution for a global feature or a module is
prohibited.
• Any direct instruction about the usage (can, must, can’t) of a
third-party library or tool must be followed.
• The use of a small library or tool that solves a simple and
unique task, representing a subcomponent of a global feature or
module, is allowed.
• During the evaluation, the team will justify any usage of
library or tool that is not explicitly approved by the subject,
and that is not in contradiction with the constraints of the
subject.
• During the evaluation, the evaluator will take her/his
responsibility and define if the usage of a specific library
or tool is legitimate (and allowed) or almost solving an entire
feature or module (and prohibited).

INFORMATION:
Two Minor Modules are equivalent to one Major Module.

1 Overview
• Web
    ◦ Major module: Use a Framework to build the backend.
    ◦ Minor module: Use a framework or a toolkit to build the frontend.
    ◦ Minor module: Use a database for the backend.
    ◦ Major module: Store the score of a tournament in the Blockchain.
• User Management
    ◦ Major module: Standard user management, authentication, users across
tournaments.
    ◦ Major module: Implementing a remote authentication.
Gameplay and user experience
    ◦ Major module: Remote players
    ◦ Major module: Multiplayers (more than 2 in the same game).
    ◦ Major module: Add Another Game with User History and Matchmaking.
    ◦ Minor module: Game Customization Options.
    ◦ Major module: Live chat.
• AI-Algo
    ◦ Major module: Introduce an AI Opponent.
    ◦ Minor module: User and Game Stats Dashboards
• Cybersecurity
    ◦ Major module: Implement WAF/ModSecurity with Hardened Configuration
and HashiCorp Vault for Secrets Management.
    ◦ Minor module: GDPR Compliance Options with User Anonymization, Local
Data Management, and Account Deletion.
    ◦ Major module: Implement Two-Factor Authentication (2FA) and JWT.
• Devops
    ◦ Major module: Infrastructure Setup for Log Management.
    ◦ Minor module: Monitoring system.
    ◦ Major module: Designing the Backend as Microservices.